#!/usr/bin/env python

from __future__ import division
from pentago import *
from other.core import *
from other.core.value import parser
from other.core.utility import tryfile
from interface import *
import glob

# Parse arguments
history = PropManager.add('history','').set_required(True).set_help('record thread execution history to given file')
short = PropManager.add('short',1).set_help('events separated by less than this number of milliseconds will be merged')
drop = PropManager.add('drop',.1).set_help('kinds which take less than this amount of time won\'t be shown')
mode = PropManager.add('mode','rasterize').set_allowed('rasterize bar'.split()).set_help('rendering mode')
resolution = PropManager.add('resolution',(8*2048,10)).set_help('resolution of each thread in rasterization mode')
vertical_separate = PropManager.add('vertical_separate',False)
save = PropManager.add('save','').set_help('save the rasterized image to the given file')
parser.parse('Thread history visualization',positional=[history])

def draw_history(history):
  import pylab
  axes = pylab.figure().add_subplot(111)

  # Use distinguishable colors for important entries, black for the rest
  with Log.scope('colors'):
    most = 7
    base_colors = wheel_color(arange(most)/most)
    random.seed(842953)
    random.shuffle(base_colors)
    kind_names = time_kind_names()
    sums = zeros(len(kind_names))
    for k in xrange(len(kind_names)):
      if 'idle' not in kind_names[k]:
        sums[k] = sum(sum(thread[k][:,1]-thread[k][:,0]) for thread in history)
    order = argsort(-sums)
    Log.write('most important kinds = %s'%[kind_names[o] for o in order[:most]])
    colors = [None]*len(kind_names)
    for c,k in enumerate(order):
      try:
        colors[k] = base_colors[c]
        pylab.plot([0],[0],color=colors[k],label=kind_names[k],linewidth=5)
      except IndexError:
        colors[k] = zeros(3)
    pylab.plot([0],[0],color='k',label='other',linewidth=5)

  # Determine bounds
  start = min(times.min() for thread in history for times in thread if len(times))
  for thread in history:
    for times in thread:
      times -= start
  elapsed = 1e-6*max(times.max() for thread in history for times in thread if len(times))

  # Render history
  if mode()=='rasterize':
    xr,yr = resolution()
    image = zeros((int(xr),int(len(history)*yr),4))
  for n,thread in enumerate(history):
    with Log.scope('thread %d'%n):
      if vertical_separate():
        levels = {}
        for k,times in [(o,thread[o]) for o in order]:
          if len(times) and any(colors[k]):
            levels[k] = len(levels)
        height = .8/(len(levels)+1)
      else:
        height = .8
      for k,times in enumerate(thread):
        name = kind_names[k]
        total = sum(1e-6*(times[:,1]-times[:,0]))
        if total>drop() and 'idle' not in name:
          assert all(times[:-1,1]<=times[1:,0])
          color = colors[k]
          if vertical_separate():
            level = levels[k] if any(color) else len(levels)
          else:
            level = 0
          if mode()=='bar':
            simple = simplify_history(times,short())
            Log.write('%s: count %d, reduced %d, total %g'%(name,len(times),len(simple),total))
            simple[:,1] -= simple[:,0]
            axes.broken_barh(1e-6*simple,(n+.1+height*level,height),edgecolor=color,facecolor=color,label=name)
          elif mode()=='rasterize':
            Log.write('%s: count %d, total %g'%(name,len(times),total))
            lo = n+.1+height*level
            rasterize_history(image,(elapsed,len(history)),times,(lo,lo+height),hstack([color,1]))

  # Show
  if mode()=='rasterize':
    image /= maximum(1,image[:,:,-1,None])
    image[:,:,:-1] += 1-image[:,:,-1,None]
    if save():
      with Log.scope('saving'):
        Image.write(save(),image[:,:,:-1].copy())
    image = image.swapaxes(0,1)[::-1,:,:-1]
    pylab.imshow(image,aspect='auto',extent=(0,elapsed,0,len(history)))
  axes.legend()
  pylab.show()

# Read history
Log.configure('draw history',0,0,100)
if history().endswith('.try'):
  draw_history(tryfile.read(history()))
else:
  with Log.scope('read'):
    names = glob.glob(history()+'/history-r*')
    ranks = [None]*len(names)
    for name in names:
      m = re.search(r'history-r(\d+)',name)
      rank = int(m.group(1))
      data = fromfile(name,dtype=int64).reshape(-1,2)
      threads,kinds = data[0]
      ranks[rank] = [[data[data[i][0]:data[i][1]] for kind in xrange(kinds) for i in (1+thread*kinds+kind,)] for thread in xrange(threads)]
  draw_history([thread for rank in ranks for thread in rank])
