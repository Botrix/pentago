#!/usr/bin/env python

from __future__ import division
import os
import re
import sqlite3
import fileinput
from other.core import *
from other.core.value import parser
from interface import *
from ashelve import *

# Properties
game = PropManager.add('game','defense').set_allowed('defense'.split())
jobs = PropManager.add('jobs',1).set_abbrev('j')
stones = PropManager.add('stones',6)
bits = PropManager.add('bits',26).set_abbrev('b')
action = PropManager.add('action','gen').set_allowed('gen list'.split()).set_required(True)
parser.parse('Opening book generator',positional=[action])

# Fork if desired
assert 1<=jobs()<32
for _ in xrange(jobs()-1):
  assert action()=='gen'
  print 'forking'
  if not os.fork():
    break

# Open the book
book = ashelf('opening-%s.db'%game())

def count(boards):
  boards = asarray(boards)
  return sum(unpack(boards).reshape(*(boards.shape+(36,)))!=0,axis=-1)

def list_book():
  entries = book.dict(strict=False)
  keys = asarray(list(book.keys(strict=False)),dtype=uint64)
  counts = count(keys)
  for n in xrange(stones()+1):
    for board in sort(keys[counts==n]):
      moves = entries[board]
      print 'board %d, stones %d, %s'%(board,count(board),('black wins (possibly in %d moves)'%moves if moves<36 else 'tie'))
      print show_board(board),'\n'

def solve_board(board):
  # Since we don't clear the table each time, the depth estimate is approximate only
  black = black_to_move(board)
  for depth in xrange(black,40,2):
    print 'searching to depth %d'%depth
    d,v = divmod(engine.simple_evaluate(depth,board),4)
    if d>=36:
      assert v>0
      return depth if v==2 else 40

def gen_book():
  engine.init_table(bits())
  for n in xrange(stones()+1):
    for board in all_boards(n):
      try:
        with book.lock(board) as entry:
          if not entry:
            print 'solving board %d, stones %d'%(board,n)
            print show_board(board)
            depth = solve_board(board)
            entry.set(depth)
      except Locked:
        pass

if action()=='list':
  list_book()
elif action()=='gen':
  gen_book()
