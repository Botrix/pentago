#!/usr/bin/env python

from __future__ import division
from geode import *
from geode.value import parser
from pentago import *
from pentago.base import precompute

def random_board(n):
  s = hstack([16*q+arange(9) for q in xrange(4)])
  random.shuffle(s)
  return pack((sum(1<<s[:(n+1)//2]),sum(1<<s[(n+1)//2:][:n//2])))

commands = {}
def command(f):
  commands[f.__name__] = f
  return f

@command
def estimate():
  "Estimate how many random boards are close to a win"
  random.seed(91131)
  total = 1000000
  close = 0
  wins = precompute.win_patterns()
  for i in xrange(total):
    board = random_board(24)
    s0,s1 = unpack(board).astype(int64)
    d = min([6 if s1&w else precompute.popcount(w&~s0) for w in wins])
    if d<=3:
      close += 1
      if not (close&1023):
        print 'i %d, close %d, fraction %g'%(i,close,close/i)

@command
def counts():
  "Count supersymmetry-reduced boards with each number of stones"
  counts = [large(count_boards(n,2048)) for n in xrange(37)]
  width = max(len(s) for s in counts)
  print 'counts:'
  for n,s in enumerate(counts):
    print '  %2d:  %*s'%(n,width,s)

@command
def estimates():
  "Compare the exact count of supersymmetry-reduced boards to a Monte-Carlo estimate"
  tol = .01
  for n in xrange(0,37):
    count = count_boards(n,2048)
    estimate = estimate_supercount_boards(n,tol)
    print 'n %d, count %d, estimate %g, estimate/count %g'%(n,count,estimate,estimate/count)

@command
def quadrants():
  "Count minimal quadrants"
  mins = minimal_quadrants()
  print 'minimal quadrants = %d'%len(mins)

@command
def probability():
  "Estimate probability that a random 18 stone board is a win for black"
  random.seed(7384101)
  stones = 18 # 12 # 26
  turn = stones&1
  depth = 35-stones
  aggressive = not turn
  wins = 0
  init_supertable(21)
  clear_stats()
  print 'random %d stone positions, depth %d, turn %d, aggressive %d'%(stones,depth,turn,aggressive)
  for total in xrange(1,100000):
    board = random_board(stones)
    print show_board(board)
    score = super_evaluate(aggressive,depth,flip_board(board,turn),zeros(4,int))
    print 'board %d, score %d %d'%(board,score//4,score%4)
    if score%4!=1:
      wins += 1
    print 'total %d, black wins %d, fraction %g'%(total,wins,wins/total)

@command
def approx():
  "Show a bunch of quantitative data about the full endgame computation"
  total = 0
  partials = zeros(36,dtype=uint64)
  raw_total = 0
  symmetries = 8
  print 'symmetries = %d'%symmetries
  for n in xrange(37):
    count = all_boards_stats(n,symmetries)
    total += count
    partials[n:] += count
    raw_total += count_boards(n,2048)
  sections = sum(len(all_boards_sections(n,symmetries)) for n in xrange(37))
  print 'grand total = %s, grand ratio = %g, total sections = %d'%(large(total),total/raw_total,sections)
  simple_total = sum(count_boards(n,8) for n in xrange(37))
  print 'super ratio = %g, simple total = %s'%(256*total/simple_total,large(simple_total))
  for p in 17,18:
    print 'total up to %d stones = %s supers, %s bytes'%(p,large(partials[p]),large(64*long(partials[p])))

@command
def sections():
  "Plot the data size distribution as a function of section size"
  symmetries = 8
  sizes = sort(hstack([all_boards_section_sizes(n,symmetries) for n in xrange(37)])).astype(double)
  totals = cumsum(sizes)
  fractions = totals/totals[-1]
  import pylab 
  pylab.plot(sizes,fractions) 
  pylab.xlabel('section size')
  pylab.ylabel('fraction of data in smaller sections')
  pylab.show()

@command
def quick():
  "Estimate probability that a random board is already game over"
  section = (3,3),(3,3),(3,3),(3,3)
  random = Random(7523131)
  steps = 100000
  counts = sample_immediate_endings(random,section,steps)
  p = counts/sum(counts)
  print 'immediate endings: boring %g, black %g, white %g, tie %g'%tuple(p)

@command
def help():
  "Display help"
  print 'usage: analyze <command>'
  print 'available commands = %s\n'%' '.join(commands.keys())
  n = max(map(len,commands.keys()))
  for name,f in sorted(commands.items()):
    print '%-*s : %s'%(n,name,f.__doc__)

if __name__=='__main__':
  props = PropManager()
  command = props.add('command','help').set_allowed(commands.keys())
  parser.parse(props,'Endgame related stuff',positional=[command])
  commands[command()]()
