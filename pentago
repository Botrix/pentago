#!/usr/bin/env python -u

from __future__ import division
import os
import re
import sys
import optparse
from interface import *
from other.core import *
from other.core.value import parser

# Properties
bits = PropManager.add('bits',-1).set_abbrev('b').set_help('size of transposition table in bits (default 21 for super, 24 otherwise)')
depth = PropManager.add('depth',3).set_abbrev('d').set_help('search depth (default %default)')
seed = PropManager.add('seed',711170497).set_help('random seed (default %default)')
record = PropManager.add('record','').set_help('append random game records to the given file')
start = PropManager.add('start','0,0').set_help('comma separated starting board (and optional rotation vector) and turn')
manual = PropManager.add('manual',-1).set_abbrev('m').set_help('play the given side manually')
limit = PropManager.add('limit',36).set_help('limit black\' choices to the given number of moves')
debug = PropManager.add('debug',False).set_help('turn on debugging (may cause massive slowdowns)')
brief = PropManager.add('brief',36).set_help('stop after the given number of moves')
trace = PropManager.add('trace',False).set_help('diagnose tree evaluation errors using iterated tracing')
full = PropManager.add('full',False).set_help('play to the end even in record mode')
engine_type = PropManager.add('engine','super').set_allowed('normal simple super'.split()).set_help('engine variant')
parser.parse('Pentago solver',positional=[engine_type])

print 'command = %s'%parser.command()

if engine_type()=='super':
  engine.init_supertable(bits() if bits()>0 else 21)
else:
  engine.init_table(bits() if bits()>0 else 24)
seed = abs(seed())
print 'random seed = %d'%seed
random.seed(seed)

engine.set_super_debug(debug())

if record():
  file = open(record(),'a')
  while 1:
    # Play a game
    board = 0,(0,0,0,0) if engine_type()=='super' else 0
    engine.clear_supertable()
    game = play(board,0,[0,1],depth(),early_exit=not full(),simple=engine_type()=='simple')
    print>>file,seed,repr(game)
    file.flush()
    # Choose a new seed
    seed = random.randint(2**31)
    print '\nrandom seed = %d'%seed
    random.seed(seed)
else:
  start = map(int,start().split(','))
  assert len(start) in (2,6)
  board,turn = start[0],start[-1]
  rotation = start[1:5] if len(start)==6 else zeros(4,int32)
  if engine_type()=='super':
    board = board,rotation
    engine.set_super_move_limit(limit()) 
  else:
    board = rotate(board,rotation)
  assert turn in (0,1)
  sides = [0,1] if manual()<0 else [1-manual()]
  while 1:
    try:
      play(board,turn,sides,depth(),simple=engine_type()=='simple',brief=brief())
    except RuntimeError,e:
      if not trace():
        raise
      print 'error: %s'%str(e)
      if not engine.trace_learn():
        break
      # Try again with more trace knowledge
      engine.clear_supertable()
      random.seed(seed)
    else:
      break
