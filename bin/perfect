#!/usr/bin/env python
'''Perfect pentago explorer'''

from __future__ import division,unicode_literals,print_function,absolute_import
from pentago import * 
from geode import *
from geode.value import parser
import pylab
import glob
import sys

# Properties
props = PropManager()
bits = props.add('bits',21).set_abbrev('b').set_help('size of transposition table in bits')
dir = props.add('dir',os.path.normpath(os.path.dirname(sys.argv[0]))+'/../data/edison/project/all') \
  .set_help('data directory')
parser.parse(props,'Perfect pentago explorer')

# Load data lazily
init_threads(-1,-1)
slices = [f for f in glob.glob(dir()+'/slice-*.pentago') if os.path.exists(f)]
print('loading data from\n  %s'%('\n  '.join(slices)))
data = reader_block_cache([s for f in slices for s in open_supertensors(f)],1<<30)

def plot_board(board):
  current_board = [board]
  arrow_info = [[]]
  
  import matplotlib.pyplot as plot
  fig = plot.gcf()
  def update():
    fig.clf()
    board = current_board[0]
    arrow_info[0] = []
    pylab.title('board %d, %s to %s, %s%s'%(
      board.board,
      ('black','white')[board.turn],
      ('place','rotate')[board.middle],
      ('tie','black wins','white wins')[(1-2*board.turn)*board.value(data)],
      ' (done)' if board.done() else ''))
    results = {-1:'r',0:'b',1:'g'}
    fig.gca().add_artist(plot.Circle((3,7),1/2,color=('0','.5')[board.turn]))
    fig.gca().add_artist(plot.Circle((3,7),1/4,color=results[board.value(data)]))
    for i in xrange(6):
      for j in xrange(6):
        fig.gca().add_artist(plot.Circle((i+1/2,j+1/2),1/2,
          fill=bool(board.grid[i,j]),color=('0','0','.7')[board.grid[i,j]]))
        if not board.middle and not board.done() and not board.grid[i,j]:
          fig.gca().add_artist(plot.Circle((i+1/2,j+1/2),1/4,picker=True,
            color=results[board.place(i,j).value(data)]))
    if board.middle and not board.done():
      for qx in 0,1:
        for qy in 0,1:
          for d in -1,1:
            corner = 6.8*asarray((qx-1/2,qy-1/2))
            other = d*asarray([-corner[1],corner[0]])
            start = 3+corner+1/8*(other-corner)
            delta = 1/5*(other-corner)
            arrow_info[0].append((start+delta/2,(qx,qy,d),board.rotate(qx,qy,d)))
            fig.gca().arrow(start[0],start[1],delta[0],delta[1],width=.1,head_width=.3,picker=True,
              color=results[-board.rotate(qx,qy,d).value(data)])
    e = 2
    pylab.xlim(0-e,6+e)
    pylab.ylim(0-e,6+e)
    pylab.hlines(3,0,6)
    pylab.vlines(3,0,6)
    pylab.xlabel('red loses, blue ties, green wins')
    pylab.axes().set_aspect('equal')
    pylab.draw()
  update()

  def onpick(event):
    board = current_board[0]
    if not board.middle:
      center = asarray(event.artist.center)
      i,j = rint(asarray(center)-1/2).astype(int)
      print('place stone at %d %d'%(i,j))
      board = board.place(i,j)
    else:
      x = asarray((event.mouseevent.xdata,event.mouseevent.ydata))
      best = arrow_info[0][0]
      for c,i,b in arrow_info[0]:
        if magnitude(x-best[0]) > magnitude(x-c):
          best = c,i,b
      print('rotate quadrant %d %d %s'%(i[0],i[1],{-1:'right',1:'left'}[i[2]]))
      board = best[2]
    current_board[0] = board
    update()
  fig.canvas.mpl_connect('pick_event',onpick)
  pylab.show()

def main():
  # No stones, black to move, not in the middle
  board = high_board_t(0,False)
  plot_board(board)

if __name__=='__main__':
  main()
